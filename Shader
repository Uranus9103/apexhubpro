-- AutoPerfShader.client.lua
-- Gộp cả PerfUtils + AutoPerf vào 1 LocalScript
-- Đặt trong StarterPlayer > StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local StarterGui = game:GetService("StarterGui")
local player = Players.LocalPlayer

--------------------------------------------------------
-- PERF UTILS MODULE (gộp vào luôn)
--------------------------------------------------------
local PerfUtils = {}
local originalStates = {
    baseparts = {},
    particleEmitters = {},
    trails = {},
    decals = {},
}
local function isSafeToModify(obj)
    if not obj then return false end
    if obj:IsDescendantOf(game.Players) then return false end
    return true
end

function PerfUtils.applyLowQuality()
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and isSafeToModify(part) then
            if originalStates.baseparts[part] == nil then
                originalStates.baseparts[part] = {CastShadow = part.CastShadow}
            end
            pcall(function() part.CastShadow = false end)
        end
        if part:IsA("ParticleEmitter") and isSafeToModify(part) then
            if originalStates.particleEmitters[part] == nil then
                originalStates.particleEmitters[part] = {Enabled = part.Enabled}
            end
            pcall(function() part.Enabled = false end)
        end
        if part:IsA("Trail") and isSafeToModify(part) then
            if originalStates.trails[part] == nil then
                originalStates.trails[part] = {Enabled = part.Enabled}
            end
            pcall(function() part.Enabled = false end)
        end
        if part:IsA("Decal") and isSafeToModify(part) then
            if originalStates.decals[part] == nil then
                originalStates.decals[part] = {Transparency = part.Transparency}
            end
            pcall(function()
                part.Transparency = math.clamp(part.Transparency + 0.2, 0, 1)
            end)
        end
    end

    pcall(function()
        if originalStates._lighting == nil then
            originalStates._lighting = {
                GlobalShadows = Lighting.GlobalShadows,
                OutdoorAmbient = Lighting.OutdoorAmbient,
                Brightness = Lighting.Brightness
            }
        end
        Lighting.GlobalShadows = false
        Lighting.Brightness = math.max(0.6, (originalStates._lighting.Brightness or Lighting.Brightness) - 0.5)
    end)
end

function PerfUtils.restoreQuality()
    for part, state in pairs(originalStates.baseparts) do
        if part and part.Parent then
            pcall(function() part.CastShadow = state.CastShadow end)
        end
    end
    originalStates.baseparts = {}

    for e, state in pairs(originalStates.particleEmitters) do
        if e and e.Parent then
            pcall(function() e.Enabled = state.Enabled end)
        end
    end
    originalStates.particleEmitters = {}

    for t, state in pairs(originalStates.trails) do
        if t and t.Parent then
            pcall(function() t.Enabled = state.Enabled end)
        end
    end
    originalStates.trails = {}

    for d, state in pairs(originalStates.decals) do
        if d and d.Parent then
            pcall(function() d.Transparency = state.Transparency end)
        end
    end
    originalStates.decals = {}

    if originalStates._lighting then
        pcall(function()
            Lighting.GlobalShadows = originalStates._lighting.GlobalShadows
            Lighting.OutdoorAmbient = originalStates._lighting.OutdoorAmbient
            Lighting.Brightness = originalStates._lighting.Brightness
        end)
        originalStates._lighting = nil
    end
end

--------------------------------------------------------
-- SHADER & AUTO PERF LOGIC
--------------------------------------------------------
local TARGET_FPS = 60
local LOW_FPS_THRESHOLD = 30
local MEDIUM_FPS_THRESHOLD = 45
local CHECK_INTERVAL = 4

local smoothedFPS = TARGET_FPS
local lastCheck = 0
local updating = true

local function setupEffects()
    if Lighting:FindFirstChild("APS_Bloom") then return end

    local bloom = Instance.new("BloomEffect")
    bloom.Name = "APS_Bloom"
    bloom.Intensity = 1
    bloom.Threshold = 0.6
    bloom.Size = 24
    bloom.Parent = Lighting

    local color = Instance.new("ColorCorrectionEffect")
    color.Name = "APS_Color"
    color.Saturation = 0.05
    color.Contrast = 0.02
    color.TintColor = Color3.fromRGB(245, 240, 230)
    color.Parent = Lighting

    local sun = Instance.new("SunRaysEffect")
    sun.Name = "APS_SunRays"
    sun.Intensity = 0.12
    sun.Spread = 0.2
    sun.Parent = Lighting

    local dof = Instance.new("DepthOfFieldEffect")
    dof.Name = "APS_DOF"
    dof.FocusDistance = 40
    dof.InFocusRadius = 10
    dof.Parent = Lighting

    local blur = Instance.new("BlurEffect")
    blur.Name = "APS_Blur"
    blur.Size = 0
    blur.Parent = Lighting
end

local function setHighQuality()
    setupEffects()
    if Lighting:FindFirstChild("APS_Bloom") then Lighting.APS_Bloom.Enabled = true end
    if Lighting:FindFirstChild("APS_Color") then Lighting.APS_Color.Enabled = true end
    if Lighting:FindFirstChild("APS_SunRays") then Lighting.APS_SunRays.Enabled = true end
    if Lighting:FindFirstChild("APS_DOF") then Lighting.APS_DOF.Enabled = true end
    if Lighting:FindFirstChild("APS_Blur") then Lighting.APS_Blur.Enabled = false end
    PerfUtils.restoreQuality()
end

local function setMediumQuality()
    setupEffects()
    if Lighting:FindFirstChild("APS_Bloom") then Lighting.APS_Bloom.Intensity = 0.6 end
    if Lighting:FindFirstChild("APS_Color") then Lighting.APS_Color.Saturation = 0.02 end
    if Lighting:FindFirstChild("APS_SunRays") then Lighting.APS_SunRays.Intensity = 0.07 end
    if Lighting:FindFirstChild("APS_DOF") then Lighting.APS_DOF.Enabled = false end
    if Lighting:FindFirstChild("APS_Blur") then Lighting.APS_Blur.Enabled = false end
    PerfUtils.restoreQuality()
end

local function setLowQuality()
    setupEffects()
    if Lighting:FindFirstChild("APS_Bloom") then Lighting.APS_Bloom.Enabled = false end
    if Lighting:FindFirstChild("APS_Color") then Lighting.APS_Color.Enabled = false end
    if Lighting:FindFirstChild("APS_SunRays") then Lighting.APS_SunRays.Enabled = false end
    if Lighting:FindFirstChild("APS_DOF") then Lighting.APS_DOF.Enabled = false end
    if Lighting:FindFirstChild("APS_Blur") then Lighting.APS_Blur.Enabled = false end
    PerfUtils.applyLowQuality()
end

local function updateFPS(dt)
    local fps = 1 / math.max(dt, 0.0001)
    smoothedFPS = smoothedFPS * 0.9 + fps * 0.1
    lastCheck = lastCheck + dt
    if lastCheck >= CHECK_INTERVAL then
        lastCheck = 0
        if smoothedFPS < LOW_FPS_THRESHOLD then
            setLowQuality()
        elseif smoothedFPS < MEDIUM_FPS_THRESHOLD then
            setMediumQuality()
        else
            setHighQuality()
        end
        StarterGui:SetCore("SendNotification", {
            Title = "AutoPerf",
            Text = "FPS: "..math.floor(smoothedFPS + 0.5),
            Duration = 2
        })
    end
end

local function createToggleGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoPerf_GUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local btn = Instance.new("TextButton")
    btn.Name = "PerfButton"
    btn.Size = UDim2.new(0, 110, 0, 36)
    btn.Position = UDim2.new(1, -120, 0, 12)
    btn.Text = "AutoPerf: ON"
    btn.BackgroundTransparency = 0.35
    btn.BorderSizePixel = 0
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 14
    btn.Parent = screenGui

    local state = true
    btn.MouseButton1Click:Connect(function()
        state = not state
        if state then
            btn.Text = "AutoPerf: ON"
            updating = true
        else
            btn.Text = "AutoPerf: OFF"
            updating = false
            PerfUtils.restoreQuality()
            setHighQuality()
        end
    end)
end

--------------------------------------------------------
-- INIT
--------------------------------------------------------
setupEffects()
setHighQuality()
createToggleGui()

RunService.RenderStepped:Connect(function(dt)
    if updating then updateFPS(dt) end
end)
